@startuml
' !pragma layout smetana
hide empty members

class Environment {
  - variables: Dict<String, String>
  + setVariable(name: String, value: String): void
  + getValue(name: String): String
}
note bottom of Environment
  наследует своё содержание от запустившего;
  PATH обязателен, если не было
  заполняется чем-то дефолтным
end note

class Output {
  - exitCode: Int
  - output: String
  - errorMessage: String
  + Output(stdout: String, stderr: String): Output
  + getOutput(): String
}

note left of Output
  Обработка результата работы команды.
  Может быть достаточно сложная
  обработка  stdout и stderr в конструкторе.
end note

abstract Command.Command{
  - args: String [*]
  + <<Create>> Command(args: String [*])
  + execute(): Output
}

Command.Command --> Output

class Command.Cat{}
class Command.Pwd{}
class Command.Echo{}
class Command.Wc{}
class Command.Bind{}
note top of Bind : присваивание значения переменной
class Command.Exit{}

class Command.External{
  - needsPathExtension(): Bool
  - findExecutable(env: Environment) : String
  + executableExists(env: Environment): Bool
}
note top of External
  executableExists() проверяет наличие исполняемого файла
  в зависимости от результата needsPathExtension()
  True -> ищем в PATH через findExecutable()
  False -> проверяем существование и флаги
end note

Cat --|> Command.Command
Pwd --|> Command.Command
Echo --|> Command.Command
Wc --|> Command.Command
Bind --|> Command.Command
Exit --|> Command.Command

External --|> Command.Command

class CommandQueue{
  - commands: Command [*]
  + addCommand(command: Command): void
  + popCommand(): Command
}
note top of CommandQueue : обёртка над контейнером
CommandQueue --> Command.Command


class CommandRunner {
  + executeCommands(): Output
}

CommandRunner --> CommandQueue
CommandRunner --> Environment

class Main{
  + runInterpreter(): void
}

Main --> CommandRunner

class CommandLine{
  - prompt: String
  + {static} read(): String
  + {static} write(output: Output): void
  + setPrompt(prompt: String): void
}
note bottom of CommandLine : класс из внешней библиотеки
note left of CommandLine::setPrompt
  устанавливает вид приглашения к вводу
end note

Main --> CommandLine
CommandRunner --> CommandLine

class Substituter.Substituter {
  + parse(input: String) : String
}
note top of Substituter.Substituter : по сути система переписываний

Main --> Substituter.Substituter
Substituter.Substituter --> Substituter.SubstituterState : state
Substituter.Substituter --> Environment

abstract Substituter.SubstituterState {
  - accumulated: String
  - previousState: SubstituterState
  + consume(char: Char) : void
}

class Substituter.S_DefaultState{}
note top of Substituter.S_DefaultState
  просто читаем строку
  ничего не делая
end note
class Substituter.S_WeakQuoteState{}
note top of Substituter.S_WeakQuoteState
  отсюда можем переходить в
  S_VariableState
end note
class Substituter.S_StrongQuoteState{}
note top of S_StrongQuoteState
  отсюда НЕ можем переходить
  в S_VariableState
end note
class Substituter.S_VariableState{
  - substitute()
}
note top of Substituter.S_VariableState
  вычитываем название
  переменной и подставляем
end note

S_DefaultState --|> SubstituterState
S_WeakQuoteState --|> SubstituterState
S_StrongQuoteState --|> SubstituterState
S_VariableState --|> SubstituterState

interface Parser.Token{
  - value: String
  + getValue(): String
}

class Parser.QuotedString{}
class Parser.PlainWord{}
class Parser.Pipe{}
class Parser.EqualsSymbol{}

QuotedString --|> Token
PlainWord --|> Token
Pipe --|> Token
EqualsSymbol --|> Token

abstract Parser.TokenizerState{
  + tokenize(): Token
}

class Parser.T_DefaultState{}
note bottom of Parser.T_DefaultState
  просто вычитаваем строку,
  разбиваем на токены
end note

class Parser.T_QuotedStringState{}
note bottom of Parser.T_QuotedStringState
  собираем всё, что в кавычках (любых)
  в один аргумент
end note

T_DefaultState --|> TokenizerState
T_QuotedStringState --|> TokenizerState

class Parser.Parser{
  - tokenize(): Token [*]
  + parse(input: String): CommandQueue
}
note top of Parser.Parser
  простой, но стандартный парсер
end note

class Parser.Tokenizer{
  + tokenize(input: String) : Token [*]
}

Parser.Parser --> Tokenizer
Tokenizer --> Token
Tokenizer --> TokenizerState : state

Main --> Parser.Parser
@enduml